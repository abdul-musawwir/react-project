[{"D:\\izaan's work\\react-project\\src\\index.js":"1","D:\\izaan's work\\react-project\\src\\App.js":"2","D:\\izaan's work\\react-project\\src\\reportWebVitals.js":"3","D:\\izaan's work\\react-project\\src\\Components\\Login.js":"4","D:\\izaan's work\\react-project\\src\\Components\\Entry.js":"5","D:\\izaan's work\\react-project\\src\\Components\\Exit.js":"6","D:\\izaan's work\\react-project\\src\\Components\\Home.js":"7","D:\\izaan's work\\react-project\\src\\Components\\Search.js":"8","D:\\izaan's work\\react-project\\src\\Components\\PdfGenerate.js":"9","D:\\izaan's work\\react-project\\src\\Components\\Regulars.js":"10","D:\\izaan's work\\react-project\\src\\Components\\hooks\\useToken.js":"11","D:\\izaan's work\\react-project\\src\\Components\\utils\\Navbar.js":"12","D:\\izaan's work\\react-project\\src\\Components\\constants.js":"13","D:\\izaan's work\\react-project\\src\\Components\\utils\\Popup.js":"14","D:\\izaan's work\\react-project\\src\\Components\\utils\\webcamComp.js":"15","D:\\izaan's work\\react-project\\src\\Components\\utils\\DocDownload.js":"16","D:\\izaan's work\\react-project\\src\\Components\\utils\\DocDownloadRegular.js":"17"},{"size":517,"mtime":1632995828869,"results":"18","hashOfConfig":"19"},{"size":1230,"mtime":1632995828862,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1632995828869,"results":"21","hashOfConfig":"19"},{"size":2395,"mtime":1633364098308,"results":"22","hashOfConfig":"19"},{"size":6542,"mtime":1633364007410,"results":"23","hashOfConfig":"19"},{"size":5730,"mtime":1633364046130,"results":"24","hashOfConfig":"19"},{"size":2825,"mtime":1633364089866,"results":"25","hashOfConfig":"19"},{"size":17927,"mtime":1633364129168,"results":"26","hashOfConfig":"19"},{"size":1121,"mtime":1632995828866,"results":"27","hashOfConfig":"19"},{"size":13455,"mtime":1633364119032,"results":"28","hashOfConfig":"19"},{"size":495,"mtime":1632995828868,"results":"29","hashOfConfig":"19"},{"size":1880,"mtime":1632995828868,"results":"30","hashOfConfig":"19"},{"size":41,"mtime":1633497015545,"results":"31","hashOfConfig":"19"},{"size":2030,"mtime":1632995828868,"results":"32","hashOfConfig":"19"},{"size":837,"mtime":1632995828869,"results":"33","hashOfConfig":"19"},{"size":2193,"mtime":1632995828868,"results":"34","hashOfConfig":"19"},{"size":1897,"mtime":1632995828868,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4kja4w",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\izaan's work\\react-project\\src\\index.js",[],"D:\\izaan's work\\react-project\\src\\App.js",[],"D:\\izaan's work\\react-project\\src\\reportWebVitals.js",[],"D:\\izaan's work\\react-project\\src\\Components\\Login.js",[],"D:\\izaan's work\\react-project\\src\\Components\\Entry.js",[],"D:\\izaan's work\\react-project\\src\\Components\\Exit.js",["77"],"import axios from 'axios'\r\nimport moment from 'moment'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { SERVER_IP } from './constants'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport './Exit.css'\r\nimport Popup from './utils/Popup';\r\n\r\n\r\nconst columns = [\r\n    { id: 'name', label: 'Name', minWidth: 170 },\r\n    { id: 'cnic', label: 'CNIC', minWidth: 100 },\r\n    { id: 'Check_In_Date', label: 'Check\\u00a0In\\u00a0Date\\u00a0and\\u00a0Time', minWidth: 100 },\r\n    { id: 'picture', label: 'Image', minWidth: 100 },\r\n    { id: 'checkout', label: 'Checkout', minWidth: 100 },\r\n  ];\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      width: '95%',\r\n      marginLeft: \"2.5%\"\r\n    },\r\n    container: {\r\n      maxHeight: 440,\r\n    },\r\n  });\r\n\r\nconst Exit = () => {\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [rows, setRows] = useState(null);\r\n\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n      };\r\n    \r\n      const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n      };\r\n\r\n\r\n      const handleCheckout = (row) => {\r\n        axios.post(\"http://\"+SERVER_IP+\"/checkout_screen\", {\r\n            body: {\r\n                Check_In_Date: row.Check_In_Date,\r\n                Check_Out_Date: moment().format().slice(0,-6),\r\n                cnic: row.cnic,\r\n            }\r\n        }).then(res => {\r\n            alert(\"Successfully Checked Out\")\r\n            window.location.reload(false)\r\n            \r\n        }).catch(err => {\r\n            alert(\"Failed to checkout! Please try again.\");\r\n        });\r\n      }\r\n\r\n    useEffect(()=>{\r\n        axios.get(\"http://\"+SERVER_IP+\"/checkout_screen\", {\r\n            params: {\r\n                date: moment().format().slice(0,-15),\r\n            }\r\n        }).then(res => {\r\n            setRows(res.data.result);\r\n            \r\n        }).catch(err => {\r\n            alert(\"Data fetch Failed! \");\r\n        });\r\n    },[])\r\n\r\n    return(\r\n        <div class=\"maincontainer1\">\r\n            <h1>List of Remaining Visitors</h1>\r\n            <div class=\"table\" >\r\n            {rows?<Paper className={classes.root}>\r\n                <TableContainer className={classes.container}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        {columns.map((column) => (\r\n                            <TableCell\r\n                            key={column.id}\r\n                            align={column.align}\r\n                            style={{ minWidth: column.minWidth }}\r\n                            >\r\n                            {column.label}\r\n                            </TableCell>\r\n                        ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                        return (\r\n                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                            {columns.map((column) => {\r\n                                const value = row[column.id];\r\n                                if (column.id === \"picture\"){\r\n                                    return(<TableCell key={column.id} align={column.align}>\r\n                                        \r\n                                        <Popup image={value}></Popup>\r\n                                    </TableCell>)\r\n                                }\r\n                                else if (column.id === \"checkout\"){\r\n                                    return(<TableCell key={column.id} align={column.align}>\r\n                                        <a class=\"checkout\" onClick={()=>handleCheckout(row)} > Checkout</a>\r\n                                       \r\n                                    </TableCell>)\r\n                                }\r\n                                else {\r\n                                    return (\r\n                                        <TableCell key={column.id} align={column.align}>\r\n                                            {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                        </TableCell>\r\n                                        );\r\n                                }\r\n                                \r\n                            })}\r\n                            </TableRow>\r\n                        );\r\n                        })}\r\n                    </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>:null}\r\n            \r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Exit","D:\\izaan's work\\react-project\\src\\Components\\Home.js",["78"],"import axios from 'axios'\r\nimport moment from 'moment'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { SERVER_IP } from './constants'\r\nimport './Home.css'\r\n\r\n\r\nconst Home = () => {\r\n\r\n    const [seconds, setSeconds] = useState(5);\r\n    const [checkout, setCheckout] = useState(0);\r\n    const [remaining, setRemainig] = useState(0);\r\n    const [defaulters,setDefaulters] = useState(0);\r\n    const [total, setTotal] = useState(0)\r\n\r\n    useEffect(()=>{\r\n        axios.get(\"http://\"+SERVER_IP+\"/home_screen_renderer\",{\r\n                params: {\r\n                    date: moment().format().slice(0,-15),\r\n                }\r\n            }).then(res => {\r\n                setTotal(res.data.total)\r\n                setRemainig(res.data.remaining)\r\n                setCheckout(res.data.checkout)\r\n                setDefaulters(res.data.defaulter)\r\n                // setResult(res.data.result)\r\n            }).catch(err => {\r\n                alert(\"Failed: \" + err+ \"\\nPlease refresh your screen\");\r\n            });\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (seconds > 0) {\r\n          setTimeout(() => setSeconds(seconds - 1), 1000);\r\n        } else {\r\n            axios.get(\"http://\"+SERVER_IP+\"/home_screen_renderer\",{\r\n                params: {\r\n                    date: moment().format().slice(0,-15),\r\n                }\r\n            }).then(res => {\r\n                setTotal(res.data.total)\r\n                setRemainig(res.data.remaining)\r\n                setCheckout(res.data.checkout)\r\n                setDefaulters(res.data.defaulter)\r\n                // setResult(res.data.result)\r\n            }).catch(err => {\r\n                alert(\"Failed: \" + err+ \"\\n please Refresh your screen\");\r\n            });\r\n          setSeconds(30)\r\n        }\r\n      });\r\n\r\n    return(<>\r\n        <div class=\"container-bg\"  > \r\n        <img id = \"image\" class=\"image\" alt=\"bg-crescent\" src=\"/logo.png\"/>\r\n        \r\n        <div class=\"show-data-container\">\r\n            <div class=\"show-data-wrapper\">\r\n                <div class=\"billie\">\r\n                    <p>Total Visitors Today:&nbsp;</p>\r\n                    <p></p>\r\n                    <p>Checked out: &nbsp;</p>\r\n                    <p></p>\r\n                    <p style={{paddingRight:\"40px\"}}>Remaining:</p>\r\n                    <p></p>\r\n                    <p style={{paddingRight:\"40px\"}}>Defaulters:</p>\r\n                </div>\r\n                <div class=\"jean\">\r\n                    <p>{total}</p>\r\n                    <p></p>\r\n                    <p>{checkout}</p>\r\n                    <p></p>\r\n                    <p>{remaining}</p>\r\n                    <p></p>\r\n                    <p>{defaulters}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n        </div>  \r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","D:\\izaan's work\\react-project\\src\\Components\\Search.js",["79"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { SERVER_IP } from './constants'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Popup from './utils/Popup';\r\nimport StringMask from 'string-mask'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport \"./Search.css\"\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 300,\r\n      \r\n    },\r\n    container:{\r\n        maxWidth: 350,\r\n        width: 350,\r\n    },\r\n    row: {\r\n        // maxHeight: \"12vh\"\r\n        padding: 0,\r\n        height: \"1rem\"\r\n    },\r\n    rowHeading: {\r\n        // maxHeight: \"12vh\"\r\n        padding: 12\r\n    },\r\n    root: {\r\n        width: '95%',\r\n        marginLeft: \"2.5%\"\r\n      },\r\n      container1: {\r\n        maxHeight: 440,\r\n      },\r\n  });\r\n\r\n\r\n  const useStyles1 = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n    },\r\n  }));\r\n  \r\n  function createData(checkbox, key, value) {\r\n    return { checkbox, key, value};\r\n  }\r\n  \r\n  const rows = [\r\n    createData('', \"name\",\"\" ),\r\n    createData('', \"cnic\",\"\"),\r\n    // createData('', \"Person_Count\",\"\"),\r\n    createData('', \"organization_name\",\"\"),\r\n    // createData('', \"contact\",\"\"),\r\n    createData('', \"From\",\"\"),\r\n    createData('', \"To\",\"\"),\r\n    // createData('', \"Contact_Person\",\"\"),\r\n    // createData('', \"Visit_Purpose\",\"\"),\r\n    createData('', \"Non_Checked_Out\",\"\")\r\n  ];\r\n\r\nconst Search = () => {\r\n\r\n    const classes1 = useStyles1();\r\n\r\n    const [dataState, setDataState] = useState({\r\n        \"name\" : {\"checked\":false,\"value\":\"\"},\r\n        \"cnic\" : {\"checked\":false,\"value\":\"\"},\r\n        // \"Person_Count\" : {\"checked\":false,\"value\":\"\"},\r\n        \"organization_name\" : {\"checked\":false,\"value\":\"\"},\r\n        // \"contact\" : {\"checked\":false,\"value\":\"\"},\r\n        \"From\" : {\"checked\":false,\"value\":\"\"},\r\n        \"To\" : {\"checked\":false,\"value\":\"\"},\r\n        // \"Contact_Person\" : {\"checked\":false,\"value\":\"\"},\r\n        // \"Visit_Purpose\" : {\"checked\":false,\"value\":\"\"},\r\n        \"Non_Checked_Out\" : {\"checked\":false,\"value\":\"\"}\r\n    })\r\n\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [rows1, setRows1] = useState(null);\r\n    const [isLoading, setisLoading] = useState(false)\r\n\r\n    const messagesEndRef = useRef(null)\r\n\r\n    \r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n      }\r\n\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n      };\r\n    \r\n      const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n      };\r\n\r\n     \r\n\r\n\r\n\r\n    const handleCheckBox = (checked,key) => {\r\n        setDataState({\r\n            ...dataState,\r\n            [key] : {...dataState[key],\"checked\":checked}\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const handleTextField = (value,key) => {\r\n        setDataState({\r\n            ...dataState,\r\n            [key] : {...dataState[key],\"value\":value}\r\n        })\r\n    }\r\n\r\n    const submitFilter = () => {\r\n        scrollToBottom()\r\n        setisLoading(true)\r\n        var formatter = new StringMask(\"00000-0000000-0\");\r\n        let data = {}\r\n        for (const [key,value] of Object.entries(dataState)){\r\n            if (value.checked === true)\r\n            {\r\n                if(key===\"cnic\")\r\n                {\r\n                    data = {\r\n                        ...data,\r\n                        [key]: formatter.apply(value.value)\r\n                    }\r\n                }\r\n                else if(key === \"Non_Checked_Out\")\r\n                {\r\n                    data = {\r\n                        ...data,\r\n                        [key]: value.checked\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    data = {\r\n                        ...data,\r\n                        [key]:value.value\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n        console.log(data)\r\n        axios.get(\"http://\"+SERVER_IP+\"/search_screen\", {\r\n            params: {\r\n                ...data\r\n            }\r\n        }).then(res => {\r\n            setRows1(res.data.result)\r\n            // setResult(res.data.result)\r\n        }).catch(err => {\r\n            setisLoading(false)\r\n            alert(\"Query failed! Please try again.\");\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n        setisLoading(false)\r\n      }, [rows1]);\r\n\r\n    const columns = [\r\n        { id: 'name', label: 'Name', minWidth: 170 },\r\n        { id: 'cnic', label: 'CNIC', minWidth: 100 },\r\n        { id: 'Person_Count', label: 'Person\\u00a0Count', minWidth: 100 },\r\n        { id: 'organization_name', label: 'Organization\\u00a0Name', minWidth: 100 },\r\n        { id: 'contact', label: 'Contact', minWidth: 100 },\r\n        { id: 'Check_In_Date', label: 'Check\\u00a0In\\u00a0Date\\u00a0and\\u00a0Time', minWidth: 100 },\r\n        { id: 'Check_Out_Date', label: 'Check\\u00a0Out\\u00a0Date\\u00a0and\\u00a0Time', minWidth: 100 },\r\n        { id: 'Contact_Person', label: 'Contact Person', minWidth: 100 },\r\n        { id: 'Visit_Purpose', label: 'Visit Purpose', minWidth: 100 },\r\n        { id: 'picture', label: 'Image', minWidth: 100 },\r\n      ];\r\n\r\n\r\n    const handleDownload = () => {\r\n        // the user can cause more than one child window so I give storage a unique id.\r\n        var parms = JSON.stringify(rows1);\r\n        var storageId = \"parms\" + String(Date.now());\r\n        sessionStorage.setItem(storageId, parms);\r\n        window.open('/generatepdf' + \"?sid=\" + storageId);\r\n        sessionStorage.removeItem(storageId)\r\n    }\r\n\r\n    return(\r\n        // result?<ShowResult results={result} />:\r\n        <>\r\n        <div className=\"maincontainer2\">\r\n            <h1>Search</h1>\r\n\r\n        <div className=\"contain\">\r\n\r\n            <div className=\"filter\">\r\n            <TableContainer component={Paper} className={classes.container}>\r\n                <Table className={classes.table} aria-label=\"caption table\">\r\n                <caption><button class=\"btnCap\" onClick={submitFilter}>Submit</button></caption>\r\n                    <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.rowHeading}>&nbsp;</TableCell>\r\n                        <TableCell className={classes.rowHeading} align=\"center\"><h5>Keys</h5></TableCell>\r\n                        {/* <TableCell className={classes.row} align=\"center\">value</TableCell> */}\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {rows.map((row) => {\r\n                        if(row.key === \"cnic\") {\r\n                            return(\r\n                            <TableRow key={row.name}>\r\n                            <TableCell className={classes.row} align=\"right\">\r\n                                <Checkbox\r\n                                defaultChecked= {false}\r\n                                color=\"default\"\r\n                                inputProps={{ 'aria-label': 'checkbox with default color' }}\r\n                                onChange={(e)=>{handleCheckBox(e.target.checked,row.key)}}\r\n                            />\r\n                            </TableCell>\r\n                            <TableCell className={classes.row} align=\"center\">\r\n                                <TextField id=\"standard-basic\" value={dataState.cnic.value} label={row.key + \"(xxxxxxxxxxxxx)\"} onChange={(e)=>{handleTextField(e.target.value,row.key)} }/>\r\n                                {/* <InputMask mask=\"99999-9999999-9\" className=\"standard-basic\" id=\"cnic\" maskChar={null}  onChange={(e)=>{handleTextField(e.target.value,row.key)}}  placeholder=\"cnic\"/> */}\r\n                            </TableCell>\r\n                            </TableRow>\r\n                            )\r\n                        }\r\n                        else if(row.key === \"From\" ) {\r\n                            return(\r\n                                <TableRow key={row.name}>\r\n                                <TableCell className={classes.row} align=\"right\">\r\n                                    <Checkbox\r\n                                    defaultChecked= {false}\r\n                                    color=\"default\"\r\n                                    inputProps={{ 'aria-label': 'checkbox with default color' }}\r\n                                    onChange={(e)=>{handleCheckBox(e.target.checked,row.key)}}\r\n                                />\r\n                                </TableCell>\r\n                                <TableCell className={classes.row} align=\"center\">\r\n                                    {/* <TextField id=\"standard-basic\" label={row.key} onChange={(e)=>{handleTextField(e.target.value,row.key)} }/> */}\r\n                                    <div \r\n                                        style={{display:'flex',alignItems:'baseline',justifyContent:'space-evenly',marginLeft:'20px'}}\r\n                                    >\r\n                                        <p style={{margin:\"0px\"}}>\r\n                                            From:\r\n                                        </p>\r\n                                        <input style={{marginRight:\"11px\"}} type=\"date\"  class=\"standard-basic\" id=\"Check-In\" name=\"Check-In\" onChange={(e)=>{handleTextField(e.target.value,row.key)} } placeholder=\"Enter Your Check-In Date Here\" />\r\n                                    </div>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                        else if( row.key === \"To\") {\r\n                            return(\r\n                                <TableRow key={row.name}>\r\n                                <TableCell className={classes.row} align=\"right\">\r\n                                    <Checkbox\r\n                                    defaultChecked= {false}\r\n                                    color=\"default\"\r\n                                    inputProps={{ 'aria-label': 'checkbox with default color' }}\r\n                                    onChange={(e)=>{handleCheckBox(e.target.checked,row.key)}}\r\n                                />\r\n                                </TableCell>\r\n                                <TableCell className={classes.row} align=\"center\">\r\n                                    {/* <TextField id=\"standard-basic\" label={row.key} onChange={(e)=>{handleTextField(e.target.value,row.key)} }/> */}\r\n                                    <div \r\n                                        style={{display:'flex',alignItems:'baseline',justifyContent:'space-evenly',marginLeft:'10px'}}\r\n                                    >\r\n                                        <p style={{margin:\"0px\"}}>\r\n                                            To:\r\n                                        </p>\r\n                                        <input type=\"date\"  class=\"standard-basic\" id=\"Check-In\" name=\"Check-In\" onChange={(e)=>{handleTextField(e.target.value,row.key)} } placeholder=\"Enter Your Check-In Date Here\" />\r\n                                    </div>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                        else if(row.key === \"Non_Checked_Out\") {\r\n                            let name= \"Non checked out\"\r\n                            return(\r\n                                <TableRow key={row.name}>\r\n                                <TableCell className={classes.row} align=\"right\">\r\n                                    <Checkbox\r\n                                    defaultChecked= {false}\r\n                                    color=\"default\"\r\n                                    inputProps={{ 'aria-label': 'checkbox with default color' }}\r\n                                    onChange={(e)=>{handleCheckBox(e.target.checked,row.key)}}\r\n                                />\r\n                                </TableCell>\r\n                                <TableCell className={classes.row} align=\"center\">\r\n                                    {/* <TextField id=\"standard-basic\" label={row.key} /> */}\r\n                                    <p style={{fontSize:\"20px\",paddingRight:\"50px\"}}>{name}</p>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                        else{\r\n                            return(\r\n                                <TableRow key={row.name}>\r\n                                <TableCell className={classes.row} align=\"right\">\r\n                                    <Checkbox\r\n                                    defaultChecked= {false}\r\n                                    color=\"default\"\r\n                                    inputProps={{ 'aria-label': 'checkbox with default color' }}\r\n                                    onChange={(e)=>{handleCheckBox(e.target.checked,row.key)}}\r\n                                />\r\n                                </TableCell>\r\n                                <TableCell className={classes.row} align=\"center\">\r\n                                    <TextField id=\"standard-basic\" label={row.key} onChange={(e)=>{handleTextField(e.target.value,row.key)} }/>\r\n                                </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                    })}\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n                </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <br/><br/><br/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div className=\"table\">\r\n                    {isLoading===false?rows1?<><Paper className={classes.root}>\r\n                    <TableContainer className={classes.container1}>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                key={column.id}\r\n                                align={column.align}\r\n                                style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows1.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                {columns.map((column) => {\r\n                                    const value = row[column.id];\r\n                                    if (column.id === \"picture\"){\r\n                                        return(<TableCell key={column.id} align={column.align}>\r\n                                            \r\n                                            <Popup image={value}></Popup>\r\n                                            {/* {column.format && typeof value === 'number' ? column.format(value) : value} */}\r\n                                        </TableCell>)\r\n                                    }\r\n                                    else {\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                            </TableCell>\r\n                                            );\r\n                                    }\r\n                                    \r\n                                })}\r\n                                </TableRow>\r\n                            );\r\n                            })}\r\n                        </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[10, 25, 100]}\r\n                        component=\"div\"\r\n                        count={rows1.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n                \r\n                <div>\r\n                    <button onClick={()=>{handleDownload()}} class=\"generate\">Generate Pdf</button>\r\n                </div>\r\n                </>\r\n                :null:<div className={classes1.root}><CircularProgress color=\"secondary\" style={{color:'white', width:\"60px\",height:\"60px\"}} /></div>}\r\n                </div>\r\n\r\n\r\n                \r\n                <div ref={messagesEndRef} />\r\n\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n// ReactPDF.render(<DocDownload />, `./example.pdf`);\r\n\r\nexport default Search","D:\\izaan's work\\react-project\\src\\Components\\PdfGenerate.js",[],"D:\\izaan's work\\react-project\\src\\Components\\Regulars.js",["80"],"import React, { useState } from 'react'\r\nimport './Regulars.css'\r\nimport InputMask from 'react-input-mask'\r\nimport axios from 'axios'\r\nimport { SERVER_IP } from './constants'\r\nimport moment from 'moment'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\nconst columns = [\r\n    { id: 'profession', label: 'Profession', minWidth: 170 },\r\n    { id: 'name', label: 'Name', minWidth: 100 },\r\n    { id: 'cnic', label: 'CNIC', minWidth: 100 },\r\n    { id: 'timing', label: 'Date', minWidth: 100 },\r\n    { id: 'additional_info', label: 'Additional Information', minWidth: 100 },\r\n  ];\r\n\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      width: '95%',\r\n      marginLeft: \"2.5%\"\r\n    },\r\n    container: {\r\n      maxHeight: 440,\r\n    },\r\n  });\r\n\r\nexport default function Regulars() {\r\n\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [rows, setRows] = useState(null);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n      };\r\n    \r\n      const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n      };\r\n\r\n\r\n    const [profession,setProfession] = useState(null)\r\n    const [name, setName] = useState(null)\r\n    const [cnic,setCnic] = useState(null)\r\n    const [addInfo,setAddInfo] = useState(null)\r\n\r\n    const [dataState, setDataState] = useState({\r\n        \"profession\" : {\"checked\":false,\"value\":\"\"},\r\n        \"cnic\" : {\"checked\":false,\"value\":\"\"},\r\n        \"From\" : {\"checked\":false,\"value\":\"\"},\r\n        \"To\" : {\"checked\":false,\"value\":\"\"}\r\n    })\r\n\r\n    const handleTextField = (value,key) => {\r\n        setDataState({\r\n            ...dataState,\r\n            [key] : {...dataState[key],\"value\":value}\r\n        })\r\n    }\r\n\r\n    const handleCheckBox = (checked,key) => {\r\n        setDataState({\r\n            ...dataState,\r\n            [key] : {...dataState[key],\"checked\":checked}\r\n        })\r\n\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        axios.post(\"http://\"+SERVER_IP+\"/regular\", {\r\n            \"profession\":profession,\r\n            \"name\":name,\r\n            \"cnic\":cnic,\r\n            \"date\":moment().format().slice(0,-6),\r\n            \"additional_info\":addInfo\r\n          }).then(res => {\r\n            alert(\"Successfully inserted\");\r\n        }).catch(err => {\r\n            alert(\"Data Insertion failed! Please try again.\");\r\n        })        \r\n    }\r\n\r\n    const filterHandler = () => {\r\n        let data = {}\r\n        for (const [key,value] of Object.entries(dataState)){\r\n            if (value.checked === true)\r\n            {\r\n                data = {\r\n                    ...data,\r\n                    [key]:value.value\r\n                }\r\n            }\r\n        }\r\n        console.log(data)\r\n        axios.get(\"http://\"+SERVER_IP+\"/regular\", {\r\n            params: {\r\n                ...data\r\n            }\r\n        }).then(res => {\r\n            console.log(res.data.result)\r\n            setRows(res.data.result)\r\n            // setResult(res.data.result)\r\n        }).catch(err => {\r\n            // setisLoading(false)\r\n            alert(\"Query failed! Please try again.\");\r\n        });\r\n    }\r\n\r\n    const handleDownload = () => {\r\n        // the user can cause more than one child window so I give storage a unique id.\r\n        var parms = JSON.stringify(rows);\r\n        var storageId = \"parms\" + String(Date.now());\r\n        sessionStorage.setItem(storageId, parms);\r\n        window.open('/generatepdf' + \"?sid=\" + storageId);\r\n        sessionStorage.removeItem(storageId)\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n        <div className=\"maincontainer4\" >\r\n            <h1>Enter Regular Visitors</h1>\r\n            <div>\r\n                <div class=\"form-cont\">\r\n                    <div class=\"fields\">\r\n                    <label for=\"profession\" class=\"form-label\"><b>Profession</b></label>\r\n                    <input \r\n                        type=\"text\" \r\n                        style = {{width:\"16rem\"}}\r\n                        onChange={e=>setProfession(e.target.value)} \r\n                        class=\"form-control\" \r\n                        placeholder=\"Enter Profession Here\"/>\r\n                    </div>\r\n                    <div class=\"fields\">\r\n                    <label for=\"Name\" class=\"form-label\"><b>Name</b></label>\r\n                    <input \r\n                        style = {{width:\"16rem\"}}\r\n                        type=\"text\" \r\n                        onChange={e=>setName(e.target.value)} \r\n                        class=\"form-control\" \r\n                        placeholder=\"Enter Name Here\"/>\r\n                    </div>\r\n                    <div class=\"fields\">\r\n                    <label for=\"cnic\" class=\"form-label\"><b>CNIC</b></label>\r\n                    <InputMask \r\n                        mask=\"99999-9999999-9\" \r\n                        className=\"form-control\" \r\n                        maskChar={null}  \r\n                        style = {{width:\"16rem\"}}\r\n                        onChange={(e)=>{setCnic(e.target.value)}}  \r\n                        placeholder=\"Enter CNIC Here\"/>\r\n                    </div>\r\n                </div>\r\n                <div class=\"text-area\">\r\n                    <label for=\"Additional_info\" class=\"form-label\"><b>Additional Information</b></label>\r\n                    <textarea class=\"form-control\" rows=\"3\" onChange={(e)=>{setAddInfo(e.target.value)}}></textarea>\r\n                </div>\r\n            </div>\r\n            <div >\r\n                <button \r\n                style= {{\r\n                    // flex: \"content\",\r\n                    marginRight: \"180px\",\r\n                    marginTop:\"-60px\", \r\n                    float: \"right\",\r\n                    width:\"150px\",\r\n                    height:\"50px\", \r\n                    fontSize:\"25px\",\r\n                    borderRadius:\"25px\",\r\n                    backgroundColor: \"darkblue\",\r\n                    }} \r\n                    onClick={clickHandler} \r\n                    type=\"submit\" \r\n                    class=\"btn btn-primary\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n\r\n            <h1 style={{paddingTop:\"90px\"}}>Search Regular Visitors</h1>\r\n            <div className=\"search-wrapper\" >\r\n                <div>\r\n                    <div class=\"input-group mb-3\" style={{width:\"27rem\"}}>\r\n                    <div class=\"input-group-text\" style={{borderRadius:\"15px 0px 0px 15px\"}}>\r\n                        <input class=\"form-check-input mt-0\" onChange={(e)=>{handleCheckBox(e.target.checked,\"profession\")}} type=\"checkbox\" value=\"\" aria-label=\"Checkbox for following text input\" />\r\n                    </div>\r\n                        <input type=\"text\" class=\"form-control\" onChange={(e)=>{handleTextField(e.target.value,\"profession\")}} aria-label=\"Text input with checkbox\" placeholder=\"Profession\"/>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div class=\"input-group mb-3\" style={{width:\"27rem\"}}>\r\n                    <div class=\"input-group-text\" style={{borderRadius:\"15px 0px 0px 15px\"}}>\r\n                        <input class=\"form-check-input mt-0\" onChange={(e)=>{handleCheckBox(e.target.checked,\"cnic\")}} type=\"checkbox\" value=\"\" aria-label=\"Checkbox for following text input\" />\r\n                    </div>\r\n                        <InputMask \r\n                        mask=\"99999-9999999-9\" \r\n                        className=\"form-control\" \r\n                        maskChar={null}  \r\n                        onChange={(e)=>{handleTextField(e.target.value,\"cnic\")}}\r\n                        placeholder=\"CNIC\"/>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div class=\"input-group mb-3\" style={{width:\"27rem\"}}>\r\n                        <p style={{color:\"white\", width:\"45px\",fontSize:\"17px\"}}>From:</p>\r\n                    <div class=\"input-group-text\" style={{borderRadius:\"15px 0px 0px 15px\"}}>\r\n                        <input class=\"form-check-input mt-0\" onChange={(e)=>{handleCheckBox(e.target.checked,\"From\")}} type=\"checkbox\" value=\"\" aria-label=\"Checkbox for following text input\" />\r\n                    </div>\r\n                        <input type=\"date\" class=\"form-control\" onChange={(e)=>{handleTextField(e.target.value,\"From\")}} />\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div class=\"input-group mb-3\" style={{width:\"27rem\"}}>\r\n                        <p style={{color:\"white\", width:\"45px\", fontSize:\"17px\"}}>To:</p>\r\n                    <div class=\"input-group-text\" style={{borderRadius:\"15px 0px 0px 15px\"}}>\r\n                        <input class=\"form-check-input mt-0\" onChange={(e)=>{handleCheckBox(e.target.checked,\"To\")}} type=\"checkbox\" value=\"\" aria-label=\"Checkbox for following text input\" />\r\n                    </div>\r\n                        <input type=\"date\" class=\"form-control\" onChange={(e)=>{handleTextField(e.target.value,\"To\")}}  />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button \r\n                style= {{\r\n                    // flex: \"content\",\r\n                    marginRight: \"180px\",\r\n                    marginTop:\"-50px\", \r\n                    float: \"right\",\r\n                    width:\"150px\",\r\n                    height:\"50px\", \r\n                    fontSize:\"25px\",\r\n                    borderRadius:\"25px\",\r\n                    backgroundColor: \"darkblue\",\r\n                    }} \r\n                    onClick={filterHandler} \r\n                    type=\"submit\" \r\n                    class=\"btn btn-primary\">\r\n                    Search\r\n                </button>\r\n            </div>\r\n            \r\n            <div class=\"table1\" >\r\n            {rows?<><Paper className={classes.root}>\r\n                <TableContainer className={classes.container}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        {columns.map((column) => (\r\n                            <TableCell\r\n                            key={column.id}\r\n                            align={column.align}\r\n                            style={{ minWidth: column.minWidth }}\r\n                            >\r\n                            {column.label}\r\n                            </TableCell>\r\n                        ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                        return (\r\n                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                            {columns.map((column) => {\r\n                                const value = row[column.id];\r\n                                if (column.id === \"timing\") {\r\n                                    return (\r\n                                        <TableCell key={column.id} align={column.align}>\r\n                                            {/* {column.format && typeof value === 'number' ? column.format(value) : value} */}\r\n                                            {value.map((date)=>{\r\n                                                return(\r\n                                                    <p>{date}</p>\r\n                                                )\r\n                                            })}\r\n                                        </TableCell>\r\n                                        );\r\n                                }\r\n                                else {\r\n                                    return (\r\n                                        <TableCell key={column.id} align={column.align}>\r\n                                            {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                        </TableCell>\r\n                                        );\r\n                                }\r\n                                \r\n                            })}\r\n                            </TableRow>\r\n                        );\r\n                        })}\r\n                    </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            <div>\r\n            <button onClick={()=>{handleDownload()}} class=\"generate\">Generate Pdf</button>\r\n        </div></>:null}\r\n            \r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","D:\\izaan's work\\react-project\\src\\Components\\hooks\\useToken.js",[],"D:\\izaan's work\\react-project\\src\\Components\\utils\\Navbar.js",["81"],"import React from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n\r\n    return(\r\n        <>\r\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top\">\r\n        <div class=\"container-fluid\">\r\n            <a class=\"navbar-brand\" href=\"/\">Reception</a>\r\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li class=\"nav-item\">\r\n                <a class=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                <a class=\"nav-link\" href=\"/entry\">Entry</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                <a class=\"nav-link\" href=\"/exit\">Exit</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                <a class=\"nav-link\" href=\"/search\">Search</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                <a class=\"nav-link\" href=\"/regulars\">Regulars</a>\r\n                </li>\r\n                {/* <li class=\"nav-item\">\r\n                <a class=\"nav-link\" href=\"/services\">\r\n                    Report Generation\r\n                </a>\r\n                </li> */}\r\n                </ul>\r\n                <a classname=\"logout-btn\" style={{backgroundColor:\"#212529\",color:\"rgba(255,255,255,.55)\",paddingRight:\"30px\"}} href=\"/\" onClick={()=>sessionStorage.clear()}>Logout</a>\r\n            </div>\r\n        </div>\r\n        </nav>\r\n\r\n            </>\r\n    )\r\n}\r\n\r\nexport default Navbar","D:\\izaan's work\\react-project\\src\\Components\\constants.js",[],"D:\\izaan's work\\react-project\\src\\Components\\utils\\Popup.js",["82","83"],"import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\n\r\nexport default function Popup({image}) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ImageIcon onClick={handleClickOpen}></ImageIcon>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Image\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n        <img src={image} alt=\"person's image\" />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","D:\\izaan's work\\react-project\\src\\Components\\utils\\webcamComp.js",["84"],"import React from \"react\";\r\nimport Webcam from \"react-webcam\";\r\n\r\nconst videoConstraints = {\r\n    width: 1280,\r\n    height: 720,\r\n    facingMode: \"user\"\r\n  };\r\n\r\n\r\n  const WebcamCapture = ({picture,setPicture}) => {\r\n\r\n    const webcamRef = React.useRef(null);\r\n\r\n\r\n    const captureEnglish = React.useCallback(\r\n      () => {\r\n        const imageSrc = webcamRef.current.getScreenshot();\r\n        setPicture(imageSrc)\r\n      },\r\n      [webcamRef]\r\n    );\r\n  \r\n    return (<>\r\n    <button style={{padding: \"0 0 0 0\"}} onClick={captureEnglish}>\r\n        <Webcam\r\n          audio={false}\r\n          height={160}\r\n          ref={webcamRef}\r\n          screenshotFormat=\"image/jpeg\"\r\n          width={260}\r\n          videoConstraints={videoConstraints}\r\n        />\r\n        </button>\r\n      </>\r\n    );\r\n  };\r\n\r\n  export default WebcamCapture;","D:\\izaan's work\\react-project\\src\\Components\\utils\\DocDownload.js",[],"D:\\izaan's work\\react-project\\src\\Components\\utils\\DocDownloadRegular.js",[],{"ruleId":"85","severity":1,"message":"86","line":118,"column":41,"nodeType":"87","endLine":118,"endColumn":96},{"ruleId":"88","severity":1,"message":"89","line":32,"column":5,"nodeType":"90","endLine":32,"endColumn":14,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":203,"column":36,"nodeType":"94","messageId":"95","endLine":203,"endColumn":37},{"ruleId":"92","severity":1,"message":"93","line":126,"column":36,"nodeType":"94","messageId":"95","endLine":126,"endColumn":37},{"ruleId":"96","severity":1,"message":"97","line":2,"column":10,"nodeType":"90","messageId":"98","endLine":2,"endColumn":20},{"ruleId":"96","severity":1,"message":"99","line":6,"column":8,"nodeType":"90","messageId":"98","endLine":6,"endColumn":24},{"ruleId":"100","severity":1,"message":"101","line":64,"column":9,"nodeType":"87","endLine":64,"endColumn":49},{"ruleId":"88","severity":1,"message":"102","line":21,"column":7,"nodeType":"103","endLine":21,"endColumn":18,"suggestions":"104"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setSeconds'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [seconds] as a second argument to the useEffect Hook.","Identifier",["105"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'useHistory' is defined but never used.","unusedVar","'MuiDialogActions' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook React.useCallback has a missing dependency: 'setPicture'. Either include it or remove the dependency array. If 'setPicture' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["106"],{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Add dependencies array: [seconds]",{"range":"111","text":"112"},"Update the dependencies array to be: [setPicture]",{"range":"113","text":"114"},[1775,1775],", [seconds]",[435,446],"[setPicture]"]